# Generated by Django 4.1.4 on 2022-12-17 04:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

from core.data_migration.init_migration import fill_languages, fill_technologies


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Specialist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('nickname', models.CharField(db_index=True, max_length=30, unique=True)),
                ('github_nickname', models.CharField(db_index=True, max_length=50, unique=True)),
                ('direction', models.CharField(choices=[('BACKEND', 'BACKEND'), ('FRONTEND', 'FRONTEND'), ('DEVOPS', 'DEVOPS'), ('GAME DEV', 'GAME DEV'), ('MOBILE', 'MOBILE'), ('DESKTOP', 'DESKTOP'), ('EMBEDDED', 'EMBEDDED'), ('DATA SCIENTIST', 'DATA SCIENTIST'), ('DATA ANALYST', 'DATA ANALYST'), ('DATA ENGINEER', 'DATA ENGINEER'), ('QA', 'QA'), ('CUSTOMER', 'CUSTOMER')], max_length=50)),
                ('rating', models.PositiveIntegerField(blank=True, default=0)),
                ('name', models.CharField(blank=True, default='', max_length=100)),
                ('surname', models.CharField(blank=True, default='', max_length=255)),
                ('born_date', models.DateField(blank=True, default=None, null=True)),
                ('about', models.TextField(blank=True, default='')),
                ('country', models.CharField(blank=True, default='', max_length=255)),
                ('city', models.CharField(blank=True, default='', max_length=255)),
                ('email', models.EmailField(blank=True, default='', max_length=254)),
                ('github', models.URLField(blank=True, default='')),
                ('is_private', models.BooleanField(blank=True, default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('github_name', models.CharField(db_index=True, max_length=100)),
                ('description', models.TextField(blank=True, default='')),
                ('version', models.CharField(blank=True, default='0.1', max_length=20)),
                ('type', models.CharField(choices=[('LIBRARY', 'LIBRARY'), ('FRAMEWORK', 'FRAMEWORK'), ('SPA', 'SPA'), ('WEB APPLICATION', 'WEB APPLICATION'), ('SERVICE', 'SERVICE'), ('DRIVER', 'DRIVER'), ('MICROCONTROLLER', 'MICROCONTROLLER'), ('GAME', 'GAME'), ('OC', 'OC'), ('DATABASE', 'DATABASE'), ('DATABASE MANAGEMENT SYSTEM', 'DATABASE MANAGEMENT SYSTEM'), ('COMPILER', 'COMPILER'), ('INTERPRETER', 'INTERPRETER'), ('PROGRAM LANGUAGE', 'PROGRAM LANGUAGE'), ('ARCHIVER', 'ARCHIVER'), ('ANTIVIRUS', 'ANTIVIRUS'), ('FIREWALL', 'FIREWALL'), ('REDACTOR', 'REDACTOR'), ('BROWSER', 'BROWSER'), ('FILE MANAGER', 'FILE MANAGER')], max_length=50)),
                ('is_private', models.BooleanField(blank=True, default=False)),
                ('start_date', models.DateField(auto_now=True)),
                ('rating', models.BigIntegerField(blank=True, default=0)),
                ('github', models.URLField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('type', models.CharField(choices=[('LIBRARY', 'LIBRARY'), ('FRAMEWORK', 'FRAMEWORK'), ('SPA', 'SPA'), ('WEB APPLICATION', 'WEB APPLICATION'), ('SERVICE', 'SERVICE'), ('DRIVER', 'DRIVER'), ('MICROCONTROLLER', 'MICROCONTROLLER'), ('GAME', 'GAME'), ('OC', 'OC'), ('DATABASE', 'DATABASE'), ('DATABASE MANAGEMENT SYSTEM', 'DATABASE MANAGEMENT SYSTEM'), ('COMPILER', 'COMPILER'), ('INTERPRETER', 'INTERPRETER'), ('PROGRAM LANGUAGE', 'PROGRAM LANGUAGE'), ('ARCHIVER', 'ARCHIVER'), ('ANTIVIRUS', 'ANTIVIRUS'), ('FIREWALL', 'FIREWALL'), ('REDACTOR', 'REDACTOR'), ('BROWSER', 'BROWSER'), ('FILE MANAGER', 'FILE MANAGER')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SpecialistTechnology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.technology')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialistSelfProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('self_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpecialistProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpecialistLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.language')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTechnology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.technology')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('specialist', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.language')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='languages',
            field=models.ManyToManyField(through='core.ProjectLanguage', to='core.language'),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='team',
            field=models.ManyToManyField(through='core.ProjectTeam', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='technologies',
            field=models.ManyToManyField(through='core.ProjectTechnology', to='core.technology'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='current_project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.project'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='languages',
            field=models.ManyToManyField(through='core.SpecialistLanguage', to='core.language'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='projects',
            field=models.ManyToManyField(related_name='projects', through='core.SpecialistProject', to='core.project'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='self_projects',
            field=models.ManyToManyField(related_name='self_projects', through='core.SpecialistSelfProject', to='core.project'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='technologies',
            field=models.ManyToManyField(through='core.SpecialistTechnology', to='core.technology'),
        ),
        migrations.AddField(
            model_name='specialist',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='specialisttechnology',
            constraint=models.UniqueConstraint(fields=('specialist', 'technology'), name='specialist__technology__constraint'),
        ),
        migrations.AddConstraint(
            model_name='specialistselfproject',
            constraint=models.UniqueConstraint(fields=('specialist', 'self_project'), name='specialist__self_project__constraint'),
        ),
        migrations.AddConstraint(
            model_name='specialistproject',
            constraint=models.UniqueConstraint(fields=('specialist', 'project'), name='specialist__project__constraint'),
        ),
        migrations.AddConstraint(
            model_name='specialistlanguage',
            constraint=models.UniqueConstraint(fields=('specialist', 'language'), name='specialist__language__constraint'),
        ),
        migrations.AddConstraint(
            model_name='projecttechnology',
            constraint=models.UniqueConstraint(fields=('project', 'technology'), name='project__technology__constraint'),
        ),
        migrations.AddConstraint(
            model_name='projectlanguage',
            constraint=models.UniqueConstraint(fields=('project', 'language'), name='project__language__constraint'),
        ),

        migrations.RunPython(fill_languages),
        migrations.RunPython(fill_technologies),
    ]
